#version 430
#extension GL_GOOGLE_include_directive : require

#include "common.h"

layout( local_size_x = 32 ) in;

struct BoundingBox
{
  vec4 first;
  vec4 second;
};

layout(push_constant) uniform params
{
    mat4 projView;
    BoundingBox box;
    uint instNumber;
} PushConstant;

layout(std430, binding = 0) readonly buffer IMatrices
{
    mat4 instMatrices[];
};

layout(std430, binding = 2) buffer visibleCount
{
    uint visibleCount;
};

layout(std430, binding = 1) buffer VisibleInd
{
    uint VisibleIndices[];
};

int IsVisible(mat4 matrix, BoundingBox BB)
{
    vec4 corners[8] = {
    {BB.first.x, BB.first.y, BB.first.z, 1.0},
    {BB.second.x, BB.first.y, BB.first.z, 1.0},
    {BB.first.x, BB.second.y, BB.first.z, 1.0},
    {BB.second.x, BB.second.y, BB.first.z, 1.0},
    {BB.first.x, BB.first.y, BB.second.z, 1.0},
    {BB.second.x, BB.first.y, BB.second.z, 1.0},
    {BB.first.x, BB.second.y, BB.second.z, 1.0},
    {BB.second.x, BB.second.y, BB.second.z, 1.0},
    };

    int res = 0;

    for (i = 0; i < 8; i++)
    {
        vec4 vertex = matrix * corners[i];
        vertex = vertex / vertex.w;
        if (abs(vertex[0]) <= 1.0 && abs(vertex[1]) <= 1.0 && vertex[2] >= 0 && vertex[2] <= 1.0)
            res ++;
    }
}


void main()
{
    uint idx = gl_GlobalInvocationID.x;
    if (idx < PushConstant.instanceCount)
    {
        mat4 matrix = PushConstant.mProjView * instMatrices[idx];
            if (isVisible(matrix, PushConstant.bbox) > 0)
            {
                uint newIndex = atomicAdd(visibleCount, 1);
                visibleIndices[newIndex] = idx;
            }
    }

}
